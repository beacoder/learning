learning Ruby

0.Philosophy
Ruby follows the principle of "least astonishment", and offers myriad ways to do the same thing.

1.Symbol
Symbols are simply constant names that you don’t have to predeclare and that are guaranteed to be unique.
A symbol literal starts with a colon and is normally followed by some kind of name: walk(:north), look(:east)

e.g:
inst_section = {
  :cello  => 'string',
  :violin => 'string'
}

inst_section = {
  cello:  'string',
  violin: 'string'
}

inst_section[:cello] # => "string"

2.Blocks
Code blocks are just chunks of code between braces or between do and end.
All you can do with a block is associate it with a call to a method.
The method can then invoke an associated block one or more times using the Ruby yield statement.

e.g:
def who_says_what
  yield("Dave", "hello")
  yield("Andy", "goodbye")
end
who_says_what {|person, phrase| puts "#{person} says #{phrase}"}

3.Object attributes
Ruby provides a shortcut for creating these simple attribute-reading/attribute-setting methods.

class BookInStock
  attr_reader   :isbn
  attr_writer   :price
  attr_accessor :price # accessor => allow read and write

  def initialize(isbn, price)
    @isbn = isbn
    @price = Float(price)
  end
end

book = BookInStock.new("isbn1", 33.80)
puts "ISBN  = #{book.isbn}"
puts "Price = #{book.price}"
book.price = book.price * 0.75 # discount price
puts "New price = #{book.price}"

4.Iterator
A Ruby iterator is simply a method that can invoke a block of code.
Within the method, the block may be invoked using the yield statement.

e.g:
def two_times
  yield
  yield
end
two_times { puts "Hello" }

animals = %w( ant bee cat dog )      # create an array
animals.each {|animal| puts animal } # iterate over the contents

Enumerator object (External iterators) can be created by calling the to_enum method
on a collection such as an array or a hash.

e.g:
a = [ 1, 3, "cat" ]
enum_a = a.to_enum
enum_a.next # => 1

Most of the internal iterator methods will also return an Enumerator object if called without a block.

e.g:
a = [ 1, 3, "cat" ]
enum_a = a.each # create an Enumerator using an internal iterator
enum_a.next     # => 1

5.Module
Modules define a namespace, a sandbox in which your methods and constants can play without
having to worry about being stepped on by other methods and constants.

6.Mixins
You can include a module within a class definition, then all the module’s instance methods
are suddenly available as methods in the class as well, they get mixed in.
In fact, mixed-in modules effectively behave as superclasses.

e.g:
module Debug
  def who_am_i?
    "#{self.class.name} (id: #{self.object_id}): #{self.name}"
  end
end

class Phonograph
  include Debug
  attr_reader :name
  def initialize(name)
    @name = name
  end
end

ph = Phonograph.new("West End Blues")
ph.who_am_i? # => "Phonograph (id: 70266478767560): West End Blues"

7.Inheritance vs Mixins
Inheritance represents the Is-A relationship, while Mixins represents the Has-A/Use-A relationship.

e.g:
class Person
  include Persistable
end

instead of this:

class Person < DataWrapper
end

8.Double-quoted strings
Double-quoted strings support substitutions.
You can substitute the value of any Ruby code into a string using the sequence #{ expr }.

e.g:
puts "now is #{ def
                  the(a) 'the ' + a
                end
                the('time')
              } for all bad coders..."

# => now is the time for all bad coders...

9.Regular Expressions
The Ruby operator =~ matches a string against a pattern.
It returns the character offset into the string at which the match occurred.

e.g:
/cat/ =~ "dog and cat" # => 8

9.Exception Handling
Guarantee that some processing is done at the end of a block of code,
regardless of whether an exception was raised.

e.g:
f = File.open("testfile")
begin
  # .. process
rescue
  # .. handle error
else
  puts "Congratulations-- no errors!" ensure
  f.close
end
