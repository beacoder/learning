learning Ruby

0.Philosophy
Ruby follows the principle of "least astonishment", and offers myriad ways to do the same thing.

1.Symbol
Symbols are simply constant names that you donâ€™t have to predeclare and that are guaranteed to be unique.
A symbol literal starts with a colon and is normally followed by some kind of name: walk(:north), look(:east)

e.g:
inst_section = {
  :cello  => 'string',
  :violin => 'string'
}

inst_section = {
  cello:  'string',
  violin: 'string'
}

inst_section[:cello] # => "string"

2.Blocks
Code blocks are just chunks of code between braces or between do and end.
All you can do with a block is associate it with a call to a method.
The method can then invoke an associated block one or more times using the Ruby yield statement.

e.g:
def who_says_what
  yield("Dave", "hello")
  yield("Andy", "goodbye")
end
who_says_what {|person, phrase| puts "#{person} says #{phrase}"}

3.Object Attributes
Ruby provides a shortcut for creating these simple attribute-reading/attribute-setting methods.

class BookInStock
  attr_reader   :isbn
  attr_writer   :price
  attr_accessor :price # accessor => allow read and write

  def initialize(isbn, price)
    @isbn = isbn
    @price = Float(price)
  end
end

book = BookInStock.new("isbn1", 33.80)
puts "ISBN  = #{book.isbn}"
puts "Price = #{book.price}"
book.price = book.price * 0.75 # discount price
puts "New price = #{book.price}"

4.Iterator
Iterators are methods that return successive elements from some kind of collection, such as an array.

e.g:
def two_times
  yield
  yield
end
two_times { puts "Hello" }

animals = %w( ant bee cat dog )      # create an array
animals.each {|animal| puts animal } # iterate over the contents

Enumerator object (External iterators) can be created by calling the to_enum method
on a collection such as an array or a hash.

e.g:
a = [ 1, 3, "cat" ]
enum_a = a.to_enum
enum_a.next # => 1

Most of the internal iterator methods will also return an Enumerator object if called without a block.

e.g:
a = [ 1, 3, "cat" ]
enum_a = a.each # create an Enumerator using an internal iterator
enum_a.next     # => 1

5.Modules
Modules define a namespace, a sandbox in which your methods and constants can play without
having to worry about being stepped on by other methods and constants.

6.Mixins
You can include a module within a class definition, which binds module's methods to the class instances.
In fact, mixed-in modules effectively behave as superclasses.

e.g:
module Debug
  def who_am_i?
    "#{self.class.name} (id: #{self.object_id}): #{self.name}"
  end
end

class Phonograph
  include Debug
  attr_reader :name
  def initialize(name)
    @name = name
  end
end

ph = Phonograph.new("West End Blues")
ph.who_am_i? # => "Phonograph (id: 70266478767560): West End Blues"

You can also extend a module within a class definition, which binds module's methods to the class itself.

e.g
module ModuleExample
  def foo
    'foo'
  end
end

class Book
  extend ModuleExample
end

Book.foo       # => 'foo'
Book.new.foo   # => NoMethodError: undefined method `foo'

7.Inheritance vs Mixins
Inheritance represents the Is-A relationship, while Mixins represents the Has-A/Use-A relationship.

e.g:
class Person
  include Persistable
end

instead of this:

class Person < DataWrapper
end

8.Double-Quoted Strings
Double-quoted strings support substitutions.
You can substitute the value of any Ruby code into a string using the sequence #{ expr }.

e.g:
puts "now is #{ def
                  the(a) 'the ' + a
                end
                the('time')
              } for all bad coders..."

# => now is the time for all bad coders...

9.Regular Expressions
The Ruby operator =~ matches a string against a pattern.
It returns the character offset into the string at which the match occurred.

e.g:
/cat/ =~ "dog and cat" # => 8

10.Exception Handling
Guarantee that some processing is done at the end of a block of code,
regardless of whether an exception was raised.

e.g:
f = File.open("testfile")
begin
  # .. process
rescue
  # .. handle error
else
  puts "Congratulations-- no errors!" ensure
  f.close
end

11.Classes vs Objects
e.g:
# Define a class with the class keyword
class Human

  # A class variable. It is shared by all instances of this class.
  @@species = 'H. sapiens'

  # Basic initializer
  def initialize(name, age = 0)
    # Assign the argument to the "name" instance variable for the instance
    @name = name
    # If no age given, we will fall back to the default in the arguments list.
    @age = age
  end

  # Basic setter method
  def name=(name)
    @name = name
  end

  # Basic getter method
  def name
    @name
  end

  # The above functionality can be encapsulated using the attr_accessor method as follows
  attr_accessor :name

  # Getter/setter methods can also be created individually like this
  attr_reader :name
  attr_writer :name

  # A class method uses self to distinguish from instance methods.
  # It can only be called on the class, not an instance.
  def self.say(msg)
    puts msg
  end

  def species
    @@species
  end
end

12.Hook Methods
A hook method/callback is a method that you write but that Ruby calls from within the interpreter
when some particular event occurs.

e.g:
# Callbacks are executed when including and extending a module
module ConcernExample
  def self.included(base)
    base.extend(ClassMethods)
    base.send(:include, InstanceMethods)
  end

  module ClassMethods
    def bar
      'bar'
    end
  end

  module InstanceMethods
    def qux
      'qux'
    end
  end
end

class Something
  include ConcernExample
end

Something.bar     # => 'bar'
Something.qux     # => NoMethodError: undefined method `qux'
Something.new.bar # => NoMethodError: undefined method `bar'
Something.new.qux # => 'qux'
