learning Lua

1.error pcall/xpcall
error:  explicitly generate an error.
pcall:  use pcall/xpcall to run function in protected mode to catch error in it.

2.block
description:  a block is a list of statements, which are executed sequentially,
              blcok ends with an "end".
              
exp:
do ... end

3.control structures
while:        while ... do ... end
repeat:       repeat ... until ...
if:           if ... then ... elseif ... then ... [else ...] end
numeric for:  for variable = beg, end [, step] do ... end
generic for:  for namelist in explist do ... end 

4.scope of variables
Local:  variables preceding with "local" is Local varibales.
Global: variables other than local is Global variables.

5.string concatenation operator
"..": used to concatenate string or numbers.

exp:
print("Hello" .. " " .. "World");

6.length operator
"#": used to get length of string or table.

exp:
t = {1,2,3}
print(#t);  => 3

7.basic function
assert:       issues an error when the value of its argument is nil or false.
require:      loads the given module.
setmetatable: sets the metatable for the given table. 
getmetatable: gets the metatable for the given table. 
type:         returns the type of its only argument, coded as a string.
_G:           a global table that holds the global environment(functions and tables).
pairs/ipairs/next: used to traverse all fields of a table.
collectgarbage:    performs a garbage-collection.

8.string manipulation
description:  the string library provides all its functions inside the table string.

string.find:  looks for the first match of pattern in the string.
string.format:  format a string.
string.sub: returns the substring of string.
string.gsub:  global string replacement.

9.table manipulation
description:  this library provides all its functions inside the table 'table'.
 
table.concat: returns a concatenated string of all string or numbers in the table.
table.insert: insert element into the table.
table.remove: remove element from the table.
table.sort:   sorts table elements in a given order.

10.mathematical functions
description:  this library provides all its functions inside the table math.

math.pow, math.log, math.max, math.min ......

11.input and output facilities
description:  this library is implemented through table io.

simple mode:  operates on a default file or stream.
io.input, io.output, io.read, io.write, io.lines, io.flush, io.close

io.read("*all")     => read the whole file.
io.read("*line")    => read the next line.
io.read("*number")  => read a number.
io.read("<num>")    => read a string no more than <num> characters.

advanced mode:  operates on a specific file.
file = assert(io.open("fileName", "mode"));
file:read, file:write, file:flush, file:seek, file:close

note: ':' in "file:read" means pass "file" to the function "read" as the first parameter.

12.operating system facilities
description:  this library is implemented through table os.

os.clock, os.date, os.execute, os.exit, os.getenv, os.setenv
os.move, os.rename, os.tmpname, os.setlocale

13.comments
"--"  => comments one line
"--[[ some comment here ]]" => comments a block

14.metatable
description:  every value in Lua can have a metatable, this metatable is an ordinary Lua table
              that defines the behavior of the original value under certain special operations.
              you can change several aspects of the behavior of operations 
              over a value by setting specific fields in its metatable,
              pretty like "overwrite function" in C++ I think.
              
common metatable field:  __index, __len, __tostring, __gc, __concat, __eq, __lt, __call, __mode ......
              
15.lua closure
description:  even outer function goes out of scope, 
              the inside clousre still have the access to the "upvalue".
implementation: anonymous function which uses an upvalue.

--[[ following is a function which returns a closure,
     pretty like "anonymous functor" returned by boost::bind() in C++ I think. ]]
     
-- script starts here

function outer()
local str = "World !";
return function ()
         print("Hello_" .. str);
       end;
end;

func = outer();
func();         =>  Hello_World !

-- script ends here

16.table
description: tables are the only "container" type in Lua. they are associative arrays, 
             which means they store a set of key/value pairs, where you can store a value under some key, 
             and later retrieve the value using that key.
             
exp:
-- construct an empty table and assign it to variable "t"
t = {}

17.bitwise operations
description:  this library provides all its functions inside the table bit32.

bit32.band, bit32.bor, bit32.bnot, bit32.xor ......

18.multiple results
description:  some functions may return multiple results. 

exp:
-- print out all contents in the table io.
for k, v in pairs(io) do print(k, v) end
              
-- print out global environment
for k, v in pairs(_G) do print(k, v) end

19.
