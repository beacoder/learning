learning emacs lisp

1.car cdr cons nth nthcdr butlast cond
cons: the cons function constructs lists
exp:  (cons 'rose '(violet daisy buttercup))  ⇒ (rose violet daisy buttercup)

car:  return the first item in the list
exp:  (car '(rose violet daisy buttercup))  ⇒  rose

cdr:  return the second to last elements
exp:  (cdr '(rose violet daisy buttercup))  ⇒  (violet daisy buttercup)  

nth:  return the nth item in the list
exp:  (nth 1 '(rose violet daisy buttercup))  ⇒ violet

nthcdr: return the nth to last elements
exp:  (nthcdr 1 '(rose violet daisy buttercup)) ⇒ (violet daisy buttercup)

butlast:  without the last n elements
exp:  (butlast '(rose violet daisy buttercup) 2)  ⇒  (rose violet)

cond: try each clause until one succeeds.
exp:  (cond ((eq 'a 'b) 'first) ((atom 'a) 'second))  ⇒ second

2.interactive
description: the purpose of (interactive …) is to makes your function callable as interactive command which can be called by execute-extended-command "M-x".
it also provides a method for taking user input and feed to your function's arguments.

3.evaluate expression
description: means to execute the expression.
exp:  eval-buffer eval-region eval-minibuffer.

4.quote
description: return the argument, without evaluating it.
exp:  `(quote x)' ⇒ `x'

5.elt aset
elt:  return element of SEQUENCE at index N.
exp:  (elt (vector 3 4 5) 0)  ⇒ 3.

aset: store element into ARRAY at index.
exp:  (setq v [3 4 5])  (aset v 0 "b")  ⇒ v = ["b" 4 5]

6.mapcar mapc
mapcar: apply FUNCTION to each element of SEQUENCE, and make a list of the results.
exp:  (mapcar '1+ [3 4 5] ) ⇒ (4 5 6)

mapc: apply FUNCTION to each element of SEQUENCE, and return the unchanged SEQUENCE.
exp:  (mapc '1+ [3 4 5] ) ⇒ [3 4 5]

7.pop nbutlast setcar setcdr
pop:  remove first element from the list and returns the removed element.
nbutlast: remove last n elements from the list and returns the new value of the list.
setcar: replaces the first element in the list and returns the replacing element.
setcdr: replaces the rest of elements in the list and returns the replacing element.

8.alist & hash table
alist:  association list, or alist for short, records a mapping from keys to values.
hash table: a very fast kind of lookup table.

9.thing-at-point & bounds-of-thing-at-point
thing-at-point: return the thing at point. thing should be a symbol specifying a type of syntactic entity,
including `symbol', `list', `sexp', `defun',`filename', `url', `email', `word', `sentence', `whitespace',
`line', `number', and `page'.

bounds-of-thing-at-point: determine the start and end buffer locations for the THING at point.

10.
