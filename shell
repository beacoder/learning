learning shell

0.设置文件为脚本文件.
#!/bin/sh ⇒ 在文件的第一行设置执行文件的程序是 /bin/sh, 也就是 shell 程序

1.在变量名称前加上$符号来访问变量的内容,变量不需要事先声明.
exp:
myvar="Hello World"
echo "$myvar" ⇒ Hello World

2.变量在引号中的行为取决于引号的类型.
exp:
myvar="Hello World"

echo "$myvar" ⇒ Hello World
echo '$myvar' ⇒ $myvar
echo \$myvar ⇒ $myvar

3.获取脚本程序的输入参数.
$1 $2 $3 ⇒ 分别获取第1、2、3个输入参数
$@ ⇒ 列出所有输入参数,参数之间用特定符号分割,分隔符不受IFS环境变量影响
@* ⇒ 列出所有输入参数,参数之间用IFS环境变量指定的分隔符分割

4.使用 test、[ 进行条件判断.
exp:
test file.c's existence.

if test -f file.c;  then ...
if [ -f file.c ]; then ...

4.控制结构.
4.1 if 语法
if ... then ... else ... fi ... ⇒ 典型if语法
elif ... ⇒ 包含多个if语句

4.2 for 循环
for ... in ...
do
  ...
done

4.3 while 循环
while ... do
...
done

4.4 until 循环 ⇒ 循环将反复执行直到 until 的条件为真时才退出循环
until ...
do
...
done

4.5 case 语法
case ... in 
  ... ;;
  ... ;;
esac

4.6 逻辑运算语法
&& ⇒ 与
|| ⇒ 或

5.函数
function_name () {
  ...
}

local ⇒ 定义函数的局部变量
return ⇒ 函数返回值

6.命令列表.
6.1 break ⇒ 跳出 for、while、until 循环
6.2 : ⇒ 冒号(:)是一个空命令
6.3 continue ⇒ 跳到 for、while、until 的下一次循环继续执行
6.4 . ⇒ 点(.)命令用于在当前 shell 中执行命令
6.5 echo ⇒ 输出与显示文本信息
6.6 eval ⇒ 执行表达式并返回值
6.7 exec ⇒ 在当前 shell 执行外部程序
6.8 exit n ⇒ 结束脚本程序执行并返回 n 作为返回码
6.9 export ⇒ 将 export 的参数设置为子 shell 的环境变量
6.10 expr ⇒ 表达式求值
6.11 printf ⇒ 输出与显示文本信息
6.12 return ⇒ 函数返回值
6.13 set ⇒ 为 shell 设置变量值
6.14 shift ⇒ 将输入参数变量号码左移一个位置,使 $2 变成 $1, $3 变成 $2
6.15 trap ⇒ 指定在接收到 Signal(信号) 后将要采取的行动
6.16 unset ⇒ 从环境中删除变量或函数
6.17 find ⇒ 搜索文件
6.18 grep ⇒ 正则表达式解析器用于字符串匹配

7.获取命令执行结果.
$(Command) ⇒ 执行命令 Command 并返回命令的输出

8.here文档.
here文档允许一条命令在获得输入数据时就好像在读取一个文件或者键盘一样,而实际是从脚本程序中得到输入数据

exp:
here文档以<<开始,紧跟着一个特殊的字符序列,该字符序列将在文档的结尾处再次出现

Command <<InputComesFromHere
...
InputComesFromHere

